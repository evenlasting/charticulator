/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dist/scripts/about.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/scripts/about.js":
/*!*******************************!*\
  !*** ./dist/scripts/about.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * @ignore\r\n * @packageDocumentation\r\n * @preferred\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst strings_1 = __webpack_require__(/*! ./strings */ \"./dist/scripts/strings.js\");\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nfetch(\"data/THIRD_PARTY.json\")\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n    const creditsEle = document.getElementById(\"credits\");\r\n    const creditsFrag = document.createDocumentFragment();\r\n    data.forEach((item) => {\r\n        const ele = createElement(\"div\", { class: \"credit \" });\r\n        ele.appendChild(createElement(\"h3\", {}, item.name));\r\n        ele.appendChild(createElement(\"p\", { class: \"authors\" }, item.authors));\r\n        ele.appendChild(createElement(\"p\", { class: \"description\" }, strings_1.strings.about.version(item.version, item.url)));\r\n        const licenseContainer = createElement(\"p\", { class: \"description\" });\r\n        const link = createElement(\"a\", { href: \"#\" }, strings_1.strings.about.license);\r\n        link.onclick = () => {\r\n            licenseContainer.appendChild(createElement(\"pre\", { class: \"license\" }, item.license));\r\n            licenseContainer.removeChild(link);\r\n        };\r\n        licenseContainer.appendChild(link);\r\n        ele.appendChild(licenseContainer);\r\n        creditsFrag.appendChild(ele);\r\n    });\r\n    creditsEle.appendChild(creditsFrag);\r\n});\r\ndocument.getElementById(\"version\").innerText = {\"version\":\"2.1.1\",\"revision\":\"38ccf52168279c9287f3e2a5801b3d3aaa6133a5\",\"buildTimestamp\":1641128267536}.version;\r\ndocument.getElementById(\"revision\").innerText = {\"version\":\"2.1.1\",\"revision\":\"38ccf52168279c9287f3e2a5801b3d3aaa6133a5\",\"buildTimestamp\":1641128267536}.revision;\r\n/**\r\n * @ignore\r\n */\r\nfunction createElement(name, attrs, text) {\r\n    const ele = document.createElement(name);\r\n    Object.keys(attrs).forEach((attr) => {\r\n        const attrValue = attrs[attr];\r\n        ele.setAttribute(attr, attrValue);\r\n    });\r\n    if (text) {\r\n        ele.textContent = text;\r\n    }\r\n    return ele;\r\n}\r\n/**\r\n * @ignore\r\n */\r\n((d) => {\r\n    const wf = d.createElement(\"script\"), s = d.scripts[0];\r\n    wf.src = \"https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js\";\r\n    wf.async = true;\r\n    s.parentNode.insertBefore(wf, s);\r\n})(document);\r\n//# sourceMappingURL=about.js.map\n\n//# sourceURL=webpack:///./dist/scripts/about.js?");

/***/ }),

/***/ "./dist/scripts/strings.js":
/*!*********************************!*\
  !*** ./dist/scripts/strings.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.strings = void 0;\r\nconst cartesianTerminology = {\r\n    xAxis: \"X Axis\",\r\n    yAxis: \"Y Axis\",\r\n    xMin: \"Left\",\r\n    xMiddle: \"Middle\",\r\n    xMax: \"Right\",\r\n    yMiddle: \"Middle\",\r\n    yMin: \"Bottom\",\r\n    yMax: \"Top\",\r\n    dodgeX: \"Stack X\",\r\n    dodgeY: \"Stack Y\",\r\n    grid: \"Grid\",\r\n    gridDirectionX: \"Horizontal\",\r\n    gridDirectionY: \"Vertical\",\r\n    packing: \"Packing\",\r\n    jitter: \"Jitter\",\r\n    overlap: \"Overlap\",\r\n};\r\nconst curveTerminology = {\r\n    xAxis: \"Tangent Axis\",\r\n    yAxis: \"Normal Axis\",\r\n    xMin: \"Left\",\r\n    xMiddle: \"Middle\",\r\n    xMax: \"Right\",\r\n    yMiddle: \"Middle\",\r\n    yMin: \"Bottom\",\r\n    yMax: \"Top\",\r\n    dodgeX: \"Stack Tangential\",\r\n    dodgeY: \"Stack Normal\",\r\n    grid: \"Grid\",\r\n    gridDirectionX: \"Tangent\",\r\n    gridDirectionY: \"Normal\",\r\n    packing: \"Packing\",\r\n    jitter: \"Jitter\",\r\n    overlap: \"Overlap\",\r\n};\r\nconst polarTerminology = {\r\n    xAxis: \"Angular Axis\",\r\n    yAxis: \"Radial Axis\",\r\n    xMin: \"Left\",\r\n    xMiddle: \"Middle\",\r\n    xMax: \"Right\",\r\n    yMiddle: \"Middle\",\r\n    yMin: \"Bottom\",\r\n    yMax: \"Top\",\r\n    dodgeX: \"Stack Angular\",\r\n    dodgeY: \"Stack Radial\",\r\n    grid: \"Grid\",\r\n    gridDirectionX: \"Angular\",\r\n    gridDirectionY: \"Radial\",\r\n    packing: \"Packing\",\r\n    jitter: \"Jitter\",\r\n    overlap: \"Overlap\",\r\n};\r\nexports.strings = {\r\n    app: {\r\n        loading: \"Loading...\",\r\n        name: \"Microsoft Charticulator\",\r\n        nestedChartTitle: \"Nested Chart | Charticulator\",\r\n        working: \"Working...\",\r\n    },\r\n    dialogs: {\r\n        saveChanges: {\r\n            saveChangesTitle: \"Save the changes\",\r\n            saveChanges: (chartName) => `Do you want to save the changes you made to ${chartName}?`,\r\n        },\r\n    },\r\n    about: {\r\n        version: (version, url) => `Version: ${version}, URL: ${url}`,\r\n        license: \"Show License\",\r\n    },\r\n    button: {\r\n        cancel: \"Cancel\",\r\n        no: \"No\",\r\n        yes: \"Yes\",\r\n    },\r\n    canvas: {\r\n        markContainer: \"To edit this glyph, please create a plot segment with it.\",\r\n        newGlyph: \"New glyph\",\r\n        zoomAuto: \"Auto zoom\",\r\n        zoomIn: \"Zoom in\",\r\n        zoomOut: \"Zoom out\",\r\n        sublayoutType: \"Sublayout type\",\r\n        elementOrders: \"Order of elements\",\r\n        gridDirection: \"Grid row direction\",\r\n        alignItemsOnX: \"Align items on X axis\",\r\n        alignItemsOnY: \"Align items on Y axis\",\r\n    },\r\n    dataset: {\r\n        dimensions: (rows, columns) => `${rows} rows, ${columns} columns`,\r\n        months: [\r\n            \"Jan\",\r\n            \"Feb\",\r\n            \"Mar\",\r\n            \"Apr\",\r\n            \"May\",\r\n            \"Jun\",\r\n            \"Jul\",\r\n            \"Aug\",\r\n            \"Sep\",\r\n            \"Oct\",\r\n            \"Nov\",\r\n            \"Dec\",\r\n        ],\r\n        replaceWithCSV: \"Replace data with CSV file\",\r\n        showDataValues: \"Show data values\",\r\n        showDerivedFields: \"Show derived fields\",\r\n        tableTitleColumns: \"Fields\",\r\n        tableTitleLinks: \"Links\",\r\n        tableTitleImages: \"Images\",\r\n        weekday: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n    },\r\n    defaultDataset: {\r\n        city: \"City\",\r\n        month: \"Month\",\r\n        temperature: \"Temperature\",\r\n        value: \"Value\",\r\n    },\r\n    dialog: {\r\n        resetConfirm: \"Are you sure you want to delete the chart?\",\r\n        deleteChart: \"Delete chart\",\r\n    },\r\n    scaleEditor: {\r\n        add: \"Add\",\r\n        removeLast: \"Remove the last\",\r\n        addLegend: \"Add Legend\",\r\n        removeLegend: \"Remove Legend\",\r\n        removeSelected: \"Remove\",\r\n        reverse: \"Reverse\",\r\n    },\r\n    legendCreator: {\r\n        legendType: \"Legend type:\",\r\n        connectBy: \"Connect by:\",\r\n        createLegend: \"Create Legend\",\r\n    },\r\n    mappingEditor: {\r\n        bindData: \"Bind data\",\r\n        keyColumnExpression: \"Key column expression\",\r\n        bindDataValue: \"Bind data value\",\r\n        remove: \"Remove\",\r\n    },\r\n    error: {\r\n        imageLoad: (url) => `failed to retrieve map image at url ${url}`,\r\n        notImplemented: \"Not implemented yet\",\r\n        storeNotFound: (componentName) => `store not found in component ${componentName}`,\r\n    },\r\n    fileExport: {\r\n        asHTML: \"Export as HTML\",\r\n        asImage: \"Export as Image\",\r\n        inferAxisMin: (objectName, inferenceAxisProperty) => `Auto min values for ${objectName}/${inferenceAxisProperty}`,\r\n        inferAxisMax: (objectName, inferenceAxisProperty) => `Auto max values for ${objectName}/${inferenceAxisProperty}`,\r\n        inferScaleMin: (objectName) => `Auto min domain for ${objectName}`,\r\n        inferScaleMax: (objectName) => `Auto max domain for ${objectName}`,\r\n        imageDPI: \"DPI (for PNG/JPEG)\",\r\n        labelAxesAndScales: \"Axes and Scales\",\r\n        labelExposedObjects: \"Exposed Objects\",\r\n        labelProperties: (exportKind) => `${exportKind} Properties`,\r\n        labelSlots: \"Data Mapping Slots\",\r\n        slotColumnExample: (columnName) => `${columnName} examples`,\r\n        slotColumnName: (columnName) => `${columnName} name`,\r\n        typeHTML: \"HTML\",\r\n        typeJPEG: \"JPEG\",\r\n        typePNG: \"PNG\",\r\n        typeSVG: \"SVG\",\r\n    },\r\n    fileImport: {\r\n        doneButtonText: \"Done\",\r\n        doneButtonTitle: \"Finish importing data\",\r\n        fileUpload: \"Open or Drop File\",\r\n        loadSample: \"Load Sample Dataset...\",\r\n        links: \"Links\",\r\n        messageNoID: (keyColumn) => `No ${keyColumn} colum are specified in main table`,\r\n        messageNoSourceOrTargetID: (linkSourceKeyColumn, linkTargetKeyColumn) => `No ${linkSourceKeyColumn} or ${linkTargetKeyColumn} colums are specified in links table`,\r\n        removeButtonText: \"Remove\",\r\n        removeButtonTitle: \"Remove this table\",\r\n    },\r\n    fileOpen: {\r\n        copy: \"Copy this chart\",\r\n        deleteConfirmation: (chartName) => `Do you want to delete the chart \"${chartName}\"?`,\r\n        delete: \"Delete this chart\",\r\n        download: \"Download this chart\",\r\n        open: \"Open Chart\",\r\n        noChart: \"(no chart to show)\",\r\n    },\r\n    fileSave: {\r\n        saveButton: \"Save to My Charts\",\r\n        chartName: \"Chart Name\",\r\n    },\r\n    filter: {\r\n        editFilter: \"Edit Filter\",\r\n        filterBy: \"Filter by \",\r\n        filterType: \"Filter Type\",\r\n        none: \"None\",\r\n        categories: \"Categories\",\r\n        expression: \"Expression\",\r\n        selectAll: \"Select All\",\r\n        clear: \"Clear\",\r\n        values: \"Values\",\r\n        column: \"Column\",\r\n    },\r\n    handles: {\r\n        drawSpiral: \"Draw Spiral\",\r\n        startAngle: \"Start Angle\",\r\n        windings: \"Windings\",\r\n    },\r\n    help: {\r\n        contact: \"Contact Us\",\r\n        gallery: \"Example Gallery\",\r\n        gettingStarted: \"Getting Started\",\r\n        home: \"Charticulator Home\",\r\n        issues: \"Report an Issue\",\r\n        version: (version) => `Version: ${version}`,\r\n    },\r\n    mainTabs: {\r\n        about: \"About\",\r\n        export: \"Export\",\r\n        new: \"New\",\r\n        open: \"Open\",\r\n        options: \"Options\",\r\n        save: \"Save As\",\r\n    },\r\n    mainView: {\r\n        attributesPaneltitle: \"Attributes\",\r\n        datasetPanelTitle: \"Dataset\",\r\n        errorsPanelTitle: \"Errors\",\r\n        glyphPaneltitle: \"Glyph\",\r\n        layersPanelTitle: \"Layers\",\r\n        scalesPanelTitle: \"Scales\",\r\n    },\r\n    menuBar: {\r\n        defaultTemplateName: \"Charticulator Template\",\r\n        export: \"Export\",\r\n        exportTemplate: \"Export template\",\r\n        help: \"Help\",\r\n        home: \"Open file menu\",\r\n        importTemplate: \"Import template\",\r\n        new: \"New (Ctrl-N)\",\r\n        open: \"Open (Ctrl-O)\",\r\n        redo: \"Redo (Ctrl-Y)\",\r\n        reset: \"Delete\",\r\n        save: \"Save (Ctrl-S)\",\r\n        saveButton: \"Save\",\r\n        dontSaveButton: \"Don't save\",\r\n        cancel: \"Cancel\",\r\n        savedButton: \"Saved\",\r\n        saveNested: \"Save Nested Chart\",\r\n        closeNested: \"Close\",\r\n        undo: \"Undo (Ctrl-Z)\",\r\n    },\r\n    options: {\r\n        comma: \"comma\",\r\n        delimiter: \"CSV Delimiter\",\r\n        fileFormat: \"Import file format\",\r\n        numberFormat: \"Number Format\",\r\n        currencyFormat: \"Currency Format\",\r\n        groups: \"Groups\",\r\n        numberFormatComma: \"Decimal: comma / Separator: dot\",\r\n        numberFormatDot: \"Decimal: dot / Separator: comma\",\r\n        semicolon: \"semicolon\",\r\n    },\r\n    coordinateSystem: {\r\n        x: \"X\",\r\n        y: \"Y\",\r\n    },\r\n    templateImport: {\r\n        columnNameTemplate: \"Column name from the template\",\r\n        columnNameChart: \"Column name from the chart design\",\r\n        dataType: \"Required data type\",\r\n        examples: \"Example data values\",\r\n        mapped: \"Column name in the dataset\",\r\n        save: \"Save mapping\",\r\n        tableName: \"Table name\",\r\n        title: \"Map your data\",\r\n        usbtitleImportTemplate: \"Map the columns from your data source to the corresponding template fields\",\r\n        usbtitleImportData: \"Map the columns from new data to the corresponding fields in the current chart design\",\r\n        unmapped: \"Unmapped\",\r\n    },\r\n    toolbar: {\r\n        symbol: \"Symbol\",\r\n        marks: \"Marks\",\r\n        curve: \"Custom Curve\",\r\n        dataAxis: \"Data Axis\",\r\n        ellipse: \"Ellipse\",\r\n        icon: \"Icon\",\r\n        image: \"Image\",\r\n        guides: \"Guides\",\r\n        guidePolar: \"Guide polar\",\r\n        guideX: \"Guide X\",\r\n        guideY: \"Guide Y\",\r\n        legend: \"Legend\",\r\n        line: \"Line\",\r\n        lineH: \"Horizontal Line\",\r\n        lineV: \"Vertical Line\",\r\n        link: \"Link\",\r\n        links: \"Links\",\r\n        nestedChart: \"Nested Chart\",\r\n        plot: \"Plot\",\r\n        plotSegments: \"Plot Segments\",\r\n        polar: \"Polar\",\r\n        rectangle: \"Rectangle\",\r\n        region2D: \"2D Region\",\r\n        scaffolds: \"Scaffolds\",\r\n        text: \"Text\",\r\n        textbox: \"Textbox\",\r\n        triangle: \"Triangle\",\r\n    },\r\n    typeDisplayNames: {\r\n        boolean: \"Boolean\",\r\n        date: \"Date\",\r\n        number: \"Number\",\r\n        string: \"String\",\r\n    },\r\n    attributesPanel: {\r\n        conditionedBy: \"Conditioned by...\",\r\n    },\r\n    core: {\r\n        default: \"(default)\",\r\n        auto: \"(auto)\",\r\n        none: \"(none)\",\r\n    },\r\n    cartesianTerminology,\r\n    curveTerminology,\r\n    polarTerminology,\r\n    alignment: {\r\n        align: \"Align\",\r\n        alignment: \"Alignment\",\r\n        left: \"Left\",\r\n        right: \"Right\",\r\n        middle: \"Middle\",\r\n        center: \"Center\",\r\n        top: \"Top\",\r\n        bottom: \"Bottom\",\r\n        padding: \"Padding\",\r\n    },\r\n    margins: {\r\n        margins: \"Margins\",\r\n        margin: \"Margin:\",\r\n        left: \"Left\",\r\n        right: \"Right\",\r\n        top: \"Top\",\r\n        bottom: \"Bottom\",\r\n    },\r\n    scale: {\r\n        linear: \"Linear\",\r\n        logarithmic: \"Logarithmic\",\r\n    },\r\n    objects: {\r\n        default: \"Default\",\r\n        opposite: \"Opposite\",\r\n        position: \"Position\",\r\n        general: \"General\",\r\n        contextMenu: \"Context menu\",\r\n        interactivity: \"Interactivity\",\r\n        colors: \"Colors\",\r\n        color: \"Color\",\r\n        outline: \"Outline\",\r\n        dimensions: \"Dimensions\",\r\n        scale: \"Scale\",\r\n        width: \"Width\",\r\n        height: \"Height\",\r\n        background: \"Background\",\r\n        opacity: \"Opacity\",\r\n        font: \"Font\",\r\n        fontSize: \"Font Size\",\r\n        size: \"Size\",\r\n        axis: \"Axis\",\r\n        style: \"Style\",\r\n        rotation: \"Rotation\",\r\n        anchorAndRotation: \"Anchor & Rotation\",\r\n        fill: \"Fill\",\r\n        strokeWidth: \"Line Width\",\r\n        stroke: \"Stroke\",\r\n        anchorX: \"Anchor X\",\r\n        anchorY: \"Anchor Y\",\r\n        alignX: \"Align X\",\r\n        alignY: \"Align Y\",\r\n        layout: \"Layout\",\r\n        appearance: \"Appearance\",\r\n        visibilityAndPosition: \"Visibility & Position\",\r\n        onTop: \"On Top\",\r\n        invalidFormat: \"Invalid format\",\r\n        roundX: \"Round X\",\r\n        roundY: \"Round Y\",\r\n        dropData: \"drop here to assign data\",\r\n        axes: {\r\n            data: \"Data\",\r\n            numericalSuffix: \": Numerical\",\r\n            categoricalSuffix: \": Categorical\",\r\n            stackingSuffix: \": Stacking\",\r\n            tickFormat: \"Tick Format\",\r\n            tickData: \"Tick Data\",\r\n            ticksize: \"Tick Size\",\r\n            tickDataFormatType: \"Tick Data Type\",\r\n            tickDataFormatTypeNone: \"None\",\r\n            tickDataFormatTypeDate: \"Date\",\r\n            tickDataFormatTypeNumber: \"Number\",\r\n            from: \"from\",\r\n            to: \"to\",\r\n            gap: \"Gap\",\r\n            direction: \"Direction\",\r\n            count: \"Count\",\r\n            dataExpressions: \"Data Expressions\",\r\n            lineColor: \"Line Color\",\r\n            tickColor: \"Tick Label Color\",\r\n            showTickLine: \"Show Tick Line\",\r\n            verticalText: \"Vertical text\",\r\n            offSet: \"Offset\",\r\n        },\r\n        plotSegment: {\r\n            subLayout: \"Sub-layout\",\r\n            type: \"Type\",\r\n            gridline: \"Gridline\",\r\n            polarCoordinates: \"Polar Coordinates\",\r\n            heightToArea: \"Height to Area\",\r\n            equalizeArea: \"Equalize area\",\r\n            autoAlignment: \"Automatic Alignment\",\r\n            origin: \"Origin\",\r\n            inner: \"Inner:\",\r\n            outer: \"Outer:\",\r\n            radius: \"Radius\",\r\n            angle: \"Angle\",\r\n            curveCoordinates: \"Curve Coordinates\",\r\n            normal: \"Normal\",\r\n            groupBy: \"Group by...\",\r\n            groupByCategory: \"Group by \",\r\n            distribution: \"Distribution\",\r\n            gravity: \"Gravity\",\r\n            order: \"Order\",\r\n            reverseGlyphs: \"Reverse glyphs order\",\r\n            flipGrid: \"Flip grid\",\r\n            orientation: \"Orientation\",\r\n            direction: \"Direction\",\r\n            directionDownRight: \"Down Right\",\r\n            directionDownLeft: \"Down Left\",\r\n            directionUpLeft: \"Up Left\",\r\n            directionUpRight: \"Up Right\",\r\n        },\r\n        visibleOn: {\r\n            visibility: \"Visibility\",\r\n            label: \"Visible On\",\r\n            all: \"All\",\r\n            first: \"First\",\r\n            last: \"Last\",\r\n            visible: \"Visible\",\r\n        },\r\n        guides: {\r\n            guideCoordinator: \"Guide Coordinator\",\r\n            count: \"Count\",\r\n            guide: \"Guide\",\r\n            baseline: \"Baseline\",\r\n            offset: \"Offset\",\r\n            angular: \"Angular\",\r\n            radial: \"Radial\",\r\n            angle: \"Angle\",\r\n        },\r\n        legend: {\r\n            orientation: \"Orientation\",\r\n            vertical: \"Vertical\",\r\n            horizontal: \"Horizontal\",\r\n            legend: \"Legend\",\r\n            editColors: \"Edit scale colors\",\r\n            markerShape: \"Shape\",\r\n            labels: \"Labels\",\r\n            layout: \"Layout\",\r\n            categoricalLegend: \"Categorical legend\",\r\n            ordering: \"Ordering\",\r\n        },\r\n        links: {\r\n            lineType: \"Line Type\",\r\n            type: \"Type\",\r\n            line: \"Line\",\r\n            bezier: \"Bezier\",\r\n            arc: \"Arc\",\r\n            solid: \"Solid\",\r\n            dashed: \"Dashed\",\r\n            dotted: \"Dotted\",\r\n            linkMarkType: \"Line mark type\",\r\n            curveness: \"Curveness\",\r\n        },\r\n        line: {\r\n            lineStyle: \"Line Style\",\r\n        },\r\n        anchor: {\r\n            label: \"(drag the anchor in the glyph editor)\",\r\n        },\r\n        dataAxis: {\r\n            dataExpression: \"Data Expressions\",\r\n            autoUpdateValues: \"Auto update values\",\r\n            autoMin: \"Auto min value\",\r\n            autoMax: \"Auto max value\",\r\n            end: \"End\",\r\n            start: \"Start\",\r\n            exportProperties: \" export properties\",\r\n            domain: \"Domain\",\r\n            range: \"Range\",\r\n            gradient: \"Gradient\",\r\n            scrolling: \"Scrolling\",\r\n            allowScrolling: \"Allow scrolling\",\r\n            windowSize: \"Window size\",\r\n            barOffset: \"Scrollbar offset\",\r\n        },\r\n        icon: {\r\n            label: \"Icon\",\r\n            image: \"Image\",\r\n            anchorAndRotation: \"Anchor & Rotation\",\r\n            anchorX: \"Anchor X\",\r\n            anchorY: \"Anchor Y\",\r\n        },\r\n        image: {\r\n            imageMode: \"Resize Mode\",\r\n            letterbox: \"Letterbox\",\r\n            stretch: \"Stretch\",\r\n            dropImage: \"Drop Image Here\",\r\n            defaultPlaceholder: \"Drop/Paste Image\",\r\n        },\r\n        scales: {\r\n            mode: \"Mode\",\r\n            greater: \"Greater\",\r\n            less: \"Less\",\r\n            interval: \"Interval\",\r\n            inclusive: \"Inclusive\",\r\n        },\r\n        text: {\r\n            margin: \"Margin\",\r\n            wrapText: \"Wrap text\",\r\n            overflow: \"Overflow\",\r\n            textDisplaying: \"Text displaying\",\r\n        },\r\n        rect: {\r\n            shape: \"Shape\",\r\n            flipping: \"Flipping\",\r\n            shapes: {\r\n                rectangle: \"Rectangle\",\r\n                triangle: \"Triangle\",\r\n                ellipse: \"Ellipse\",\r\n            },\r\n        },\r\n        derivedColumns: {\r\n            year: \"Year\",\r\n            month: \"Month\",\r\n            monthNumber: \"Month number\",\r\n            day: \"Day\",\r\n            weekOfYear: \"Week of year\",\r\n            dayOfYear: \"Day of year\",\r\n            weekday: \"Weekday\",\r\n            hour: \"Hour\",\r\n            minute: \"Minute\",\r\n            second: \"Second\",\r\n            menuSuffix: \" Derived columns \",\r\n        },\r\n    },\r\n    reOrder: {\r\n        reverse: \"Reverse\",\r\n        sort: \"Sort\",\r\n        reset: \"Reset\",\r\n    },\r\n};\r\n//# sourceMappingURL=strings.js.map\n\n//# sourceURL=webpack:///./dist/scripts/strings.js?");

/***/ })

/******/ });